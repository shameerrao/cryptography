#!/usr/bin/env python3

import sys
from utils import *
from sboxes import Sbox, Sbox_inv

def subBytes(state):
    return [[Sbox[state[i][j]] for j in range(4)] for i in range(4)]

def addRoundKey(state, round_key):
    return [[state[i][j]^round_key[i][j] for j in range(4)] for i in range(4)]

def mixColumns(state):
    m = [[2,3,1,1],
        [1,2,3,1],
        [1,1,2,3],
        [3,1,1,2]]
    out = []
    for v in state:
        mult_v = []
        for r in range(4):
            tmp=0
            for c in range(4):
                if m[r][c]!=1:
                    tmp^=double(v[c])
                if m[r][c]!=2:
                    tmp^=v[c]
            mult_v.append(tmp)
        out.append(mult_v)
    return out

def shiftRows(state):
    return [[state[(i+j)%4][j] for j in range(4)] for i in range(4)]

def aesRound(state, round_key):
    return addRoundKey(mixColumns(shiftRows(subBytes(state))), round_key)

def finalRound(state, round_key):
    return addRoundKey(shiftRows(subBytes(state)), round_key)

def keyExpension(key):
    round_constants = [0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x80,0x1b,0x36]
    key_words = [key[i:i+4] for i in range(0,len(key),4)]
    if len(key)==128/8:
        nbr_rounds=11; N=4
    elif len(key)==192/8:
        nbr_rounds=13; N=6
    elif len(key)==256/8:
        nbr_rounds=15; N=8
    else:
        raise ValueError
    expended_key=[]
    for i in range(4*nbr_rounds):
        if i<N:
            expended_key.append(key_words[i])
        elif i%N==0:
            expended_key.append([expended_key[i-N][j]^rotWord(subWord(expended_key[i-1]))[j]^[round_constants[i//N-1],0,0,0][j] for j in range(4)])
        elif N>6 and i%N==4:
            expended_key.append([expended_key[i-N][j]^subWord(expended_key[i-1])[j] for j in range(4)])
        else:
            expended_key.append([expended_key[i-N][j]^expended_key[i-1][j] for j in range(4)])
    return expended_key, nbr_rounds

def aes(initial_state, key):
    expended_key, nbr_rounds = keyExpension(key)
    round_keys = [expended_key[i:i+4] for i in range(0,len(expended_key),4)]
    state = addRoundKey(initial_state, round_keys[0])
    for r in range(nbr_rounds-2):
        state = aesRound(state, round_keys[r+1])
    return finalRound(state, round_keys[-1])

# NIST TEST VALUES
key_128 = [0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C]
key_192 = [0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B]
key_256 = [0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4]

plaintext = [[[0x6B, 0xC1, 0xBE, 0xE2], [0x2E, 0x40, 0x9F, 0x96], [0xE9, 0x3D, 0x7E, 0x11], [0x73, 0x93, 0x17, 0x2A]],
            [[0xAE, 0x2D, 0x8A, 0x57], [0x1E, 0x03, 0xAC, 0x9C], [0x9E, 0xB7, 0x6F, 0xAC], [0x45, 0xAF, 0x8E, 0x51]],
            [[0x30, 0xC8, 0x1C, 0x46], [0xA3, 0x5C, 0xE4, 0x11], [0xE5, 0xFB, 0xC1, 0x19], [0x1A, 0x0A, 0x52, 0xEF]],
            [[0xF6, 0x9F, 0x24, 0x45], [0xDF, 0x4F, 0x9B, 0x17], [0xAD, 0x2B, 0x41, 0x7B], [0xE6, 0x6C, 0x37, 0x10]]]
expected_128=[[[0x3A, 0xD7, 0x7B, 0xB4], [0x0D, 0x7A, 0x36, 0x60], [0xA8, 0x9E, 0xCA, 0xF3], [0x24, 0x66, 0xEF, 0x97]],
            [[0xF5, 0xD3, 0xD5, 0x85], [0x03, 0xB9, 0x69, 0x9D], [0xE7, 0x85, 0x89, 0x5A], [0x96, 0xFD, 0xBA, 0xAF]],
            [[0x43, 0xB1, 0xCD, 0x7F], [0x59, 0x8E, 0xCE, 0x23], [0x88, 0x1B, 0x00, 0xE3], [0xED, 0x03, 0x06, 0x88]],
            [[0x7B, 0x0C, 0x78, 0x5E], [0x27, 0xE8, 0xAD, 0x3F], [0x82, 0x23, 0x20, 0x71], [0x04, 0x72, 0x5D, 0xD4]]]
expected_192=[[[0xBD, 0x33, 0x4F, 0x1D], [0x6E, 0x45, 0xF2, 0x5F], [0xF7, 0x12, 0xA2, 0x14], [0x57, 0x1F, 0xA5, 0xCC]],
            [[0x97, 0x41, 0x04, 0x84], [0x6D, 0x0A, 0xD3, 0xAD], [0x77, 0x34, 0xEC, 0xB3], [0xEC, 0xEE, 0x4E, 0xEF]],
            [[0xEF, 0x7A, 0xFD, 0x22], [0x70, 0xE2, 0xE6, 0x0A], [0xDC, 0xE0, 0xBA, 0x2F], [0xAC, 0xE6, 0x44, 0x4E]],
            [[0x9A, 0x4B, 0x41, 0xBA], [0x73, 0x8D, 0x6C, 0x72], [0xFB, 0x16, 0x69, 0x16], [0x03, 0xC1, 0x8E, 0x0E]]]
expected_256 = [[[0xF3, 0xEE, 0xD1, 0xBD], [0xB5, 0xD2, 0xA0, 0x3C], [0x06, 0x4B, 0x5A, 0x7E], [0x3D, 0xB1, 0x81, 0xF8]],
            [[0x59, 0x1C, 0xCB, 0x10], [0xD4, 0x10, 0xED, 0x26], [0xDC, 0x5B, 0xA7, 0x4A], [0x31, 0x36, 0x28, 0x70]],
            [[0xB6, 0xED, 0x21, 0xB9], [0x9C, 0xA6, 0xF4, 0xF9], [0xF1, 0x53, 0xE7, 0xB1], [0xBE, 0xAF, 0xED, 0x1D]],
            [[0x23, 0x30, 0x4B, 0x7A], [0x39, 0xF9, 0xF3, 0xFF], [0x06, 0x7D, 0x8D, 0x8F], [0x9E, 0x24, 0xEC, 0xC7]]]

if __name__=="__main__":
    print("NIST test values for AES-128:")
    for i in range(4):
        print("\tComputed:", aes(plaintext[i], key_128))
        print("\tExpected:", expected_128[i])
    print("NIST test values for AES-192:")
    for i in range(4):
        print("\tComputed:", aes(plaintext[i], key_192))
        print("\tExpected:", expected_192[i])
    print("NIST test values for AES-256:")
    for i in range(4):
        print("\tComputed:", aes(plaintext[i], key_256))
        print("\tExpected:", expected_256[i])