#!/usr/bin/env python3

import sys

# S-Box for AES encryption (substitution table)
Sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

# Inverse S-Box for AES decryption
Sbox_inv = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]

# Double operation used for MixColumns in AES (multiplication by 2 in GF(2^8))
def double(a):
    # If the leftmost bit is 1, apply the polynomial (x^8 + x^4 + x^3 + x + 1)
    if (a&0x80)>>7==1:
        return (a<<1)^0x11b
    else:
        return a*2

# RotWord operation, rotates a word (4-byte array) left by 1 byte
def rotWord(word):
    # Rotate word = [a b c d] to [b c d a]
    assert len(word)==4
    return word[1:]+[word[0]]

# Substitution of a word using the AES S-box
def subWord(word):
    # Apply the S-box substitution on each byte of the word
    assert len(word)==4
    return [Sbox[word[i]] for i in range(4)]

# Apply the S-box to each byte in the state matrix (2D list)
def subBytes(state):
    # Apply the substitution byte-wise across the state (4x4 matrix)
    return [[Sbox[state[i][j]] for j in range(4)] for i in range(4)]

# AddRoundKey: XOR the state matrix with the round key
def addRoundKey(state, round_key):
    # Perform XOR operation between the state and round key
    return [[state[i][j]^round_key[i][j] for j in range(4)] for i in range(4)]

# MixColumns operation (column mixing in AES)
def mixColumns(state):
    # The matrix used in the MixColumns operation
    m = [[2,3,1,1],
        [1,2,3,1],
        [1,1,2,3],
        [3,1,1,2]]
    out = []
    for v in state:
        mult_v = []
        for r in range(4):
            tmp=0
            for c in range(4):
                if m[r][c]!=1:
                    tmp^=double(v[c])
                if m[r][c]!=2:
                    tmp^=v[c]
            mult_v.append(tmp)
        out.append(mult_v)
    return out

# ShiftRows operation (shifting rows of the state matrix)
def shiftRows(state):
    # Shift each row to the left by an incremented value
    return [[state[(i+j)%4][j] for j in range(4)] for i in range(4)]

# Single round of AES (includes SubBytes, ShiftRows, MixColumns, and AddRoundKey)
def aesRound(state, round_key):
    return addRoundKey(mixColumns(shiftRows(subBytes(state))), round_key)

# Final round (no MixColumns in the final round)
def finalRound(state, round_key):
    return addRoundKey(shiftRows(subBytes(state)), round_key)

# Key expansion (expanding the key for all rounds of AES)
def keyExpension(key):
    round_constants = [0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x80,0x1b,0x36]
    key_words = [key[i:i+4] for i in range(0,len(key),4)]
    if len(key)==128/8:
        nbr_rounds=11; N=4
    elif len(key)==192/8:
        nbr_rounds=13; N=6
    elif len(key)==256/8:
        nbr_rounds=15; N=8
    else:
        raise ValueError
    expended_key=[]
    for i in range(4*nbr_rounds):
        if i<N:
            expended_key.append(key_words[i])
        elif i%N==0:
            expended_key.append([expended_key[i-N][j]^rotWord(subWord(expended_key[i-1]))[j]^[round_constants[i//N-1],0,0,0][j] for j in range(4)])
        elif N>6 and i%N==4:
            expended_key.append([expended_key[i-N][j]^subWord(expended_key[i-1])[j] for j in range(4)])
        else:
            expended_key.append([expended_key[i-N][j]^expended_key[i-1][j] for j in range(4)])
    return expended_key, nbr_rounds

# AES encryption function
def aes(initial_state, key):
    expended_key, nbr_rounds = keyExpension(key)
    round_keys = [expended_key[i:i+4] for i in range(0,len(expended_key),4)]
    state = addRoundKey(initial_state, round_keys[0])
    for r in range(nbr_rounds-2):
        state = aesRound(state, round_keys[r+1])
    return finalRound(state, round_keys[-1])

# NIST test vectors for AES encryption

# 128-bit key for AES
key_128 = [0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C]

# 192-bit key for AES
key_192 = [0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B]

# 256-bit key for AES
key_256 = [0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4]

plaintext = [[[0x6B, 0xC1, 0xBE, 0xE2], [0x2E, 0x40, 0x9F, 0x96], [0xE9, 0x3D, 0x7E, 0x11], [0x73, 0x93, 0x17, 0x2A]],
            [[0xAE, 0x2D, 0x8A, 0x57], [0x1E, 0x03, 0xAC, 0x9C], [0x9E, 0xB7, 0x6F, 0xAC], [0x45, 0xAF, 0x8E, 0x51]],
            [[0x30, 0xC8, 0x1C, 0x46], [0xA3, 0x5C, 0xE4, 0x11], [0xE5, 0xFB, 0xC1, 0x19], [0x1A, 0x0A, 0x52, 0xEF]],
            [[0xF6, 0x9F, 0x24, 0x45], [0xDF, 0x4F, 0x9B, 0x17], [0xAD, 0x2B, 0x41, 0x7B], [0xE6, 0x6C, 0x37, 0x10]]]
expected_128=[[[0x3A, 0xD7, 0x7B, 0xB4], [0x0D, 0x7A, 0x36, 0x60], [0xA8, 0x9E, 0xCA, 0xF3], [0x24, 0x66, 0xEF, 0x97]],
            [[0xF5, 0xD3, 0xD5, 0x85], [0x03, 0xB9, 0x69, 0x9D], [0xE7, 0x85, 0x89, 0x5A], [0x96, 0xFD, 0xBA, 0xAF]],
            [[0x43, 0xB1, 0xCD, 0x7F], [0x59, 0x8E, 0xCE, 0x23], [0x88, 0x1B, 0x00, 0xE3], [0xED, 0x03, 0x06, 0x88]],
            [[0x7B, 0x0C, 0x78, 0x5E], [0x27, 0xE8, 0xAD, 0x3F], [0x82, 0x23, 0x20, 0x71], [0x04, 0x72, 0x5D, 0xD4]]]
expected_192=[[[0xBD, 0x33, 0x4F, 0x1D], [0x6E, 0x45, 0xF2, 0x5F], [0xF7, 0x12, 0xA2, 0x14], [0x57, 0x1F, 0xA5, 0xCC]],
            [[0x97, 0x41, 0x04, 0x84], [0x6D, 0x0A, 0xD3, 0xAD], [0x77, 0x34, 0xEC, 0xB3], [0xEC, 0xEE, 0x4E, 0xEF]],
            [[0xEF, 0x7A, 0xFD, 0x22], [0x70, 0xE2, 0xE6, 0x0A], [0xDC, 0xE0, 0xBA, 0x2F], [0xAC, 0xE6, 0x44, 0x4E]],
            [[0x9A, 0x4B, 0x41, 0xBA], [0x73, 0x8D, 0x6C, 0x72], [0xFB, 0x16, 0x69, 0x16], [0x03, 0xC1, 0x8E, 0x0E]]]
expected_256 = [[[0xF3, 0xEE, 0xD1, 0xBD], [0xB5, 0xD2, 0xA0, 0x3C], [0x06, 0x4B, 0x5A, 0x7E], [0x3D, 0xB1, 0x81, 0xF8]],
            [[0x59, 0x1C, 0xCB, 0x10], [0xD4, 0x10, 0xED, 0x26], [0xDC, 0x5B, 0xA7, 0x4A], [0x31, 0x36, 0x28, 0x70]],
            [[0xB6, 0xED, 0x21, 0xB9], [0x9C, 0xA6, 0xF4, 0xF9], [0xF1, 0x53, 0xE7, 0xB1], [0xBE, 0xAF, 0xED, 0x1D]],
            [[0x23, 0x30, 0x4B, 0x7A], [0x39, 0xF9, 0xF3, 0xFF], [0x06, 0x7D, 0x8D, 0x8F], [0x9E, 0x24, 0xEC, 0xC7]]]

if __name__=="__main__":
    print("NIST test values for AES-128:")
    for i in range(4):
        print("\tComputed:", aes(plaintext[i], key_128))
        print("\tExpected:", expected_128[i])
    print("NIST test values for AES-192:")
    for i in range(4):
        print("\tComputed:", aes(plaintext[i], key_192))
        print("\tExpected:", expected_192[i])
    print("NIST test values for AES-256:")
    for i in range(4):
        print("\tComputed:", aes(plaintext[i], key_256))
        print("\tExpected:", expected_256[i])